# config.py - FIXED VERSION with Bulletproof Configuration
import os
from typing import List

def parse_channel_id(channel_str):
    """Parse channel ID from environment variable - handles all formats"""
    if not channel_str:
        return None

    # Handle integer IDs (including negative ones)
    try:
        return int(channel_str)
    except ValueError:
        # Handle string usernames (starting with @)
        if channel_str.startswith('@'):
            return channel_str
        # Handle t.me links
        elif channel_str.startswith('https://t.me/'):
            username = channel_str.split('/')[-1]
            return f"@{username}"
        # Handle channel IDs that might be strings with -100 prefix
        elif channel_str.startswith('-100'):
            try:
                return int(channel_str)
            except ValueError:
                return channel_str
        # Assume it's a username without @
        else:
            return f"@{channel_str}"

class Config:
    # Bot Configuration
    API_ID = int(os.environ.get("API_ID", "0"))
    API_HASH = os.environ.get("API_HASH", "")
    BOT_TOKEN = os.environ.get("BOT_TOKEN", "")

    # Bot Info
    BOT_NAME = os.environ.get("BOT_NAME", "Video Merger Bot")
    DEVELOPER = os.environ.get("DEVELOPER", "@YourUsername")

    # Owner and Admins - FIXED PARSING
    OWNER_ID = int(os.environ.get("OWNER_ID", "0"))
    ADMINS = []
    if os.environ.get("ADMINS"):
        try:
            ADMINS = [int(x.strip()) for x in os.environ.get("ADMINS", "").split(",") if x.strip()]
        except ValueError:
            ADMINS = []

    # Authorized Users and Chats - FIXED PARSING
    AUTHORIZED_USERS = []
    if os.environ.get("AUTHORIZED_USERS"):
        try:
            AUTHORIZED_USERS = [int(x.strip()) for x in os.environ.get("AUTHORIZED_USERS", "").split(",") if x.strip()]
        except ValueError:
            AUTHORIZED_USERS = []

    AUTHORIZED_CHATS = []
    if os.environ.get("AUTHORIZED_CHATS"):
        try:
            AUTHORIZED_CHATS = [int(x.strip()) for x in os.environ.get("AUTHORIZED_CHATS", "").split(",") if x.strip()]
        except ValueError:
            AUTHORIZED_CHATS = []

    # Channels Configuration - USING THE FIXED PARSING FUNCTION
    FORCE_SUB_CHANNEL = parse_channel_id(os.environ.get("FORCE_SUB_CHANNEL"))
    UPDATE_CHANNEL = os.environ.get("UPDATE_CHANNEL", "")
    SUPPORT_GROUP = os.environ.get("SUPPORT_GROUP", "")
    LOG_CHANNEL = parse_channel_id(os.environ.get("LOG_CHANNEL"))
    NEW_USER_LOG_CHANNEL = parse_channel_id(os.environ.get("NEW_USER_LOG_CHANNEL"))
    MERGED_FILE_LOG_CHANNEL = parse_channel_id(os.environ.get("MERGED_FILE_LOG_CHANNEL"))

    # Database Configuration
    MONGO_URI = os.environ.get("MONGO_URI", "")
    DB_NAME = os.environ.get("DB_NAME", "video_merger_bot")

    # File Configuration
    DOWNLOAD_DIR = os.environ.get("DOWNLOAD_DIR", "./downloads")
    MAX_FILE_SIZE = int(os.environ.get("MAX_FILE_SIZE", 2097152000))  # 2GB

    # GoFile Configuration
    GOFILE_TOKEN = os.environ.get("GOFILE_TOKEN", "")

    # Messages Configuration
    START_TEXT = """üé¨ **Welcome to {bot_name}!**

üëã **Hello {user}!**

üöÄ **What I can do:**
‚Ä¢ Merge multiple videos into one
‚Ä¢ Support various video formats
‚Ä¢ Fast processing with queue management
‚Ä¢ High-quality output

üí° **How to use:**
1. Send me video files or URLs
2. Add multiple videos to queue
3. Click "Merge Now" to combine them
4. Download your merged video!

‚ö° **Ready to start merging videos?**
Use the buttons below to navigate!

üîß **Developer:** {developer}"""

    START_PIC = os.environ.get("START_PIC", "")

    HELP_TEXT = """üìñ **Help & Instructions**

üé¨ **How to use this bot:**

**Step 1:** Send Videos
‚Ä¢ Send video files directly
‚Ä¢ Send video URLs (YouTube, etc.)
‚Ä¢ Add multiple videos to queue

**Step 2:** Queue Management
‚Ä¢ "Add More Videos" - Add more files
‚Ä¢ "Clear All Videos" - Remove all from queue
‚Ä¢ "Merge Now" - Start merging (appears after 2+ videos)

**Step 3:** Download Result
‚Ä¢ Bot will process and merge your videos
‚Ä¢ Download link will be provided
‚Ä¢ High-quality merged output

**Note:** This bot only works in authorized groups. Please join our authorized merging group to use merging features.

**üìã Available Commands:**
‚Ä¢ `/start` - Start the bot
‚Ä¢ `/help` - Show this help
‚Ä¢ `/about` - About the bot
‚Ä¢ `/cancel` - Clear queue and cancel

**‚ö° Pro Tips:**
‚Ä¢ Videos with same resolution merge faster
‚Ä¢ Supported formats: MP4, AVI, MKV, MOV, etc.
‚Ä¢ Maximum file size: 2GB per video

**üõ†Ô∏è Need help?** Join our support group!"""

    ABOUT_TEXT = """‚ÑπÔ∏è **About Video Merger Bot**

ü§ñ **Bot Name:** {bot_name}
üë®‚Äçüíª **Developer:** {developer}
üìÖ **Version:** v2.0 Advanced
üöÄ **Language:** Python
‚öôÔ∏è **Framework:** Pyrogram

**üåü Features:**
‚Ä¢ ‚úÖ Multiple video merging
‚Ä¢ ‚úÖ URL support (YouTube, etc.)
‚Ä¢ ‚úÖ Queue management system
‚Ä¢ ‚úÖ Professional UI
‚Ä¢ ‚úÖ MongoDB database
‚Ä¢ ‚úÖ Admin panel
‚Ä¢ ‚úÖ Broadcast system
‚Ä¢ ‚úÖ Force subscribe
‚Ä¢ ‚úÖ User management

**üìä Performance:**
‚Ä¢ Fast processing
‚Ä¢ High-quality output
‚Ä¢ Multiple format support
‚Ä¢ Cloud storage integration

**üíù Support Development:**
If you like this bot, please:
‚Ä¢ ‚≠ê Star our repository
‚Ä¢ üì¢ Share with friends
‚Ä¢ üí¨ Join our community

**üîó Links:**
‚Ä¢ Update Channel: {update_channel}
‚Ä¢ Support Group: {support_group}

¬© 2024 - Made with ‚ù§Ô∏è"""

# Create global config instance
config = Config()
